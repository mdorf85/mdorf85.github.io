<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog = true]]></title>
  <link href="http://mdorf85.github.io/atom.xml" rel="self"/>
  <link href="http://mdorf85.github.io/"/>
  <updated>2014-10-13T17:18:41-04:00</updated>
  <id>http://mdorf85.github.io/</id>
  <author>
    <name><![CDATA[Michael Dorfman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Law And/&amp;&amp; Order]]></title>
    <link href="http://mdorf85.github.io/blog/2014/10/13/law-and-slash-and-and-order/"/>
    <updated>2014-10-13T15:20:55-04:00</updated>
    <id>http://mdorf85.github.io/blog/2014/10/13/law-and-slash-and-and-order</id>
    <content type="html"><![CDATA[<p>Something that affects nearly every line of code you write, but tends not to receive as much attention, or at least an exlsuive lesson when learning how to code is <strong>precedence</strong>, or the order in which operators are evaluated. Maybe that&rsquo;s because it&rsquo;s a somewhat cut and dry subject. What I mean by that is, once you know or reference this&hellip;</p>

<p><a href="http://ruby-doc.org/core-2.1.3/doc/syntax/precedence_rdoc.html">Ruby&rsquo;s Table of Precedence</a></p>

<p>&hellip;you&rsquo;re kind of all set.</p>

<p>But that doesn&rsquo;t mean moments won&rsquo;t arise when your code isn&rsquo;t working the way you&rsquo;d like and precedence ends up being the culprit.</p>

<p>Here&rsquo;s a simple assignment example where you might expect one thing, but get something totally different:</p>

<figure class='code'><figcaption><span>Ex. 1 &#8220;and versus &&&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a = </span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">   b = </span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1">#=&gt;a = 2   b = 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, sure. But what about this?</p>

<figure class='code'><figcaption><span>Ex. 2 &#8220;and versus &&&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a = </span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">   b = </span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1">#=&gt;a = 4   b = 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Woah&hellip;different.</p>

<p>Well, it makes perfect sense if you refer to your handy table of order of precedence. Here is what happens chronologically in Ex. 1:</p>

<p>1) the value 2 is assigned to the variable &lsquo;a&rsquo;<br>
2) the value 4 is assgined to the variable &lsquo;b&rsquo;</p>

<p>or</p>

<figure class='code'><figcaption><span>Ex. 1 Expressed parenthetically</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since &lsquo;=&rsquo; has a greater precedence than &lsquo;and&rsquo; this makese sense.</p>

<p>In Ex. 2:</p>

<p>1) the value 4 is assigned to the variable &lsquo;b&rsquo;<br>
2) &lsquo;2 &amp;&amp; 4&rsquo; is evaluated, returning 4<br>
3) the value 4 is assigned to the variable &lsquo;a&rsquo;</p>

<p>or</p>

<figure class='code'><figcaption><span>Ex. 2 Expressed parenthetically</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="p">)</span> <span class="c1">#simplified</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again it all comes down to &lsquo;&amp;&amp;&rsquo; having a higher order of precedence than &lsquo;=&rsquo; whereas that of &lsquo;and&rsquo; is lower than that of &lsquo;=&rsquo;.</p>

<p>In step 2 in Example 2 you&rsquo;ll notice that &lsquo;2 &amp;&amp; 4&rsquo; returns &lsquo;4&rsquo;. That is due to the <strong>Associativity</strong> of &lsquo;&amp;&amp;&rsquo; which is left-to-right. This means &lsquo;2&rsquo; is evaluated first, followed by &lsquo;4&rsquo; which is returned.</p>

<p>Finally, here&rsquo;s another quirk you might come across in Ruby&rsquo;s precedence rules:</p>

<figure class='code'><figcaption><span>Ex. 1 &#8220;&&/|| vs and/or&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span> <span class="ow">or</span> <span class="kp">true</span> <span class="ow">and</span> <span class="kp">false</span>
</span><span class='line'><span class="c1">#=&gt;false</span>
</span></code></pre></td></tr></table></div></figure>


<p>while</p>

<figure class='code'><figcaption><span>Ex. 2 &#8220;&&/|| vs and/or&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span> <span class="o">||</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span>
</span><span class='line'><span class="c1">#=&gt;true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference in return values here boils down to &lsquo;and&rsquo; and &lsquo;or&rsquo; having identical precedence resulting in Ruby evaluating it left-to-right while &lsquo;&amp;&amp;&rsquo; having a higher precedence than &lsquo;||&rsquo; means &lsquo;true &amp;&amp; false&rsquo; receives first evaluation resulting in a &lsquo;true || false&rsquo; that returns true.</p>

<p>In precedence, as with everything else in Ruby there are no surprises, so long as you know what to expect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://mdorf85.github.io/blog/2014/10/01/my-first-post-on-octopress/"/>
    <updated>2014-10-01T22:38:41-04:00</updated>
    <id>http://mdorf85.github.io/blog/2014/10/01/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello World!&rdquo;</p>
]]></content>
  </entry>
  
</feed>
